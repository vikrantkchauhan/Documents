List of Software's req for Microservices-
1. Java
2. MySQL/Postgre SQL
3. Eclipse/ STS
4. Postman
5. Consul
6. Prometheus


TOC-
1. Introduction To Microservices
2. Advantages of MS
3. Disadvantages of MS
4. Walkthrough of the Monolithic Application
5. Factors Need to be considered for converting the Monolithic to Microservices.
6. Walkthrough of the Microservices Application
7. What is Spring Cloud Consul? And why it is imp in the MS Architecture?
8. What is Application Context and What is Bootstrap Context?
9. What is Resilience4j?
10. What is Synchronous and Asynchronous communication?
11. What is an API gateway?
12. What is a declarative client?
13. Introduction to the Prometheus and its use in the Monitoring.


1. Introduction To Microservices

Microservices is an architectural approach to building a software application that involves breaking down a large application into a collection of small independent and loosly coupled services.
- Each service is designed to perform a specifc function and communicate with other through a well defined API's.

2. Advantages of MS
1. Scalability - this allows to scale up or down independently based on the demand.
- 1. Horizontal Up Scaling- here we increase the no of servers.
  2. Vertical up scaling - here we increase the capacity of the existing server.

2. Agility - this allows the developers to work on indidual serviecs with its own technology.

3. Resilience - this allow the services to be fault-tolerant, which means that if one service fails, it will not affect the rest of the application.

3. Disadvantages of MS

1. Operational Overhead - it includes the cost, deployment complexity and higher resource consumption.
2. Increased Testing Complexity
3. Increased Database opration overhead.

4. Walkthrough of the Monolithic Application

5. Factors Need to be considered for converting the Monolithic to Microservices.

What are the key considerations for converting a monolithic application to a microservices architecture?

1. Databse Independent- Each MS should have its own independent DB. This will help to isolate services from each other and make them more scalable.
- Performace and Latency
- Isolation and Autonomy 
- Data Ownership and Security

2. Service Layer Prioritization- Start with the service layer and identify the dependencies between services. This information can be used to decide which service should be migrated first.

3. Entity Grouping -

1. CustomerMS - CustomerRepo
2. CallDetailsMS - CallDetailsRepo
3. PlanMS - PlanRepo
4. FriendFamilyMS - FriendFamilyRepo

7. What is Spring Cloud Consul?

1. Service Registry and Service Discovery
http://CustomerMS:8080/customer/add

2. Centalized Configuration -
3. Load Balancing

Consul is a distributed service discovery and configuration management tool developed by HashiCorp. It provides a centralized location for storing and manging configuation data, service registry that enbales service disovery and load blancing.

Step 1- Add the below dependencies-
1. Consul Discovery
2. Consul Configuration
3. 
  <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-consul-bootstrap</artifactId>
  </dependency>

8. What is Application Context and What is Bootstrap Context?
An object that represents the configuration and runtime state of a spring based application. It is the first object creted whenever the spring boot application starts.

Bootstrap Context - It is a special context that is used to bootstap the application context itself. It is creatd before the application context and is used to configure the environment that will help the Application Context to start the application.
It is typically used to load the properties from the external configuration sources such as Consul server.

Step 2-

bootstrap.yml

server:
 port: 8080

spring:
 application:
  name: CustomerMS
 cloud:
  consul:
    host: localhost   // where is the consul server located
    discovery:
      hostname: localhost  // where is your current MS is located
    config:
      fail-fast: false  // while registering the application with the consul server
      enabled: true     // this will help in discovery of this microservice by the consul
      prefix: config   //it is the name of the root folder in whcih all the config data will                          be added
      defaultContext: application
      data-key: data
      profileSperator: '::'
      format: YAML

Step 3- Start the consul server and create the key-value pairs.

consul agent -server -bootstrap-expect=1 -data-dir=consul-data2 -ui -bind=     
    



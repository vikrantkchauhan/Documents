==========================Docker==========================
==========================Basics=========================

Normal flow=> Development -> Testing -> Production

Container is a virtual machine.
Docker is a tool which create this VM.
Docker is a company provides variour tools like a engine to create these VM's.

In normal work we can work with virtaulization using hyperviser on the
machime.

But docker is the advanced version of it uses the concept od containerisation.

Comparison between VMWare , AWS EC2 , Docker 

VMWare:

Physical h/w -> Hyperviser(ESXI)-> [VM1: os, application]; [VM2: os, applications]; etc

AWS EC2:

Physical h/w -> Hyperviser(Xen/Nitro) -> [Ec2 instance(OS, applications)];[Ec2 instance (os, application)];etc.

Docker:

Physical h/w -> OS-> Docker engine-> Containers(1,2,3,4...) uses docker hub.

===============================OS levek=l virtualization in docker=========

1. Open source centralised platform to create, deploy and run applications.
2. Docker uses host OS to run application no docker specific os.
3. Can install docker on any OS, docker engine runs natively on distibution.
4. Docker is a PAAS.
5. Docker is a OS level virtualization whereas VMWare is a hardware level virtualization.


=====================Advantaged of Docker=================
->No Preallocation of resources
->Cost efficiency
->Reusable, need only docker engine for execution
->Continuous integration efficiency due to docker image trasfer
==>Image in running condition is called image, and executing image is called container.

==>Docker is native to Linux
==>Changes can only be done in a container, not in image.

====================Disadvantages=========================
=> Containers applications are not platform independents in docker.
=>All the environments requires same OS.

=============================Workflow===============

Developer-> Docker file-> Docker Engine has Image-> Can be reused , can be pushed to Docker Hub.

->Container uses layer file system : that is install things layer by layer.like os->files ---etc

======Docker Components==============
Docker Daemon : i.e docker server \, responsible for running container, manages images etc.
	Docker client communicates with daemon for operations
	
Docker Client: CLI used by developer for performing operation on Daemon, can be used to communicate to multiple daemons.

Docker Host: Hardware and other infra on which the docker softwares executes.

Docker Registry: manages and stores docker images.
Like a GitHub. can be private and public 

Docker images: readonly binary templates used to create docker container.
	Single file with all the dependency and configuration for creating containers.
	
==Three ways to create docker images====

1. Can be taken from docker hub.
2. Can be taken from docker file i.e written by developer-> run on docker engine using docker client will convert that file to image.
3. Can be made from already existing docker container.

===Docker Container===
It is the running instance of a docker image.
Used to run the application
It is like a vm to run the applications.



=> Bean Life Cycle :-
	1. Loading Bean Definations
	2. Bean Instantiation
	3. Bean Initialization
	4. Bean Usage
	5. Bean Destruction
	
------------------------------------

1. Loading Bean Definations :-
	-> Bean definations are the configurations (blueprint or settings) that defines how bean object should be created. It includes the information about 
	the class to instantiate, property configurations, dependency injection and other configurations
	-> Bean definations can be provided by xml file or java class or annotations
	-> It is the process of reading and parsing the configuration files to create bean definations for the beans that will be managed by the spring container
	
	
2. Bean Instantiation :-
	-> In this phase, spring container will create an instance of the bean based on it bean definations
	-> How bean objects are created ?
		a. using default constructor or no-argument constructor
		b. using static factory method
		c. using instance factory method
	-> In this phase, bean objects are initialized with default values based on the data types of the properties in the JavaBean class
	-> In this phase, the container also injects the required dependencies into the bean object by any following way :-
		a. Setter method DI
		b. Constructor DI
		
		
3. Bean Initialization :-
	-> In this phase bean object is initialized by its original values
	-> How bean objects are initialized ?
		a. using property tags
		b. using explicit ways
			i. using custom init() method
			ii. using afterPropertiesSet() method of InitializingBean callback interface
			iii. using @PostConstruct annotation (jar file is needed javax.annotation-api-xxx.jar)
			
			
4.  Bean Usage :-
	-> Once the bean is fully initialized, it is ready to be used in our application.
	-> Beans can be retrieved from the spring container and can be used for business logic in our application
	
	
5. Bean Destruction :-
	-> In this phase bean objects will be destroyed or deleted
	-> How bean objects are destroyed ?
		i. using custom destroy() method
		ii. using destroy() method of DisposableBean callback interface
		iii. using @PreDestroy annotation (jar file is needed javax.annotation-api-xxx.jar)
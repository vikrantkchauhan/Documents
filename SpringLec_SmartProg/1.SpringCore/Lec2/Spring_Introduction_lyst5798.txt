=> What is Spring ?
	-> Spring is an "Open Source Application Framework" which is used to develop any type of application i.e. Standalone Application or Enterprise Application
	-> Spring framework was written by Rod Johnson
	-> Spring framework was released under Apache 1.0 licence
	-> Spring framework was released in June 2003
	-> First production version i.e. 1.0 version was released in March 2004
	-> Latest version is 6.x version
	
	
=> Advantages of Spring Framework :-
	1. Dependency Injection
	2. High Level Abstraction and Simplified Development
	3. Enhanced Integration & Ecosystem
	4. AOP (Aspect Oriented Programming)
	5. Easy to test the application
	6. Scalabilty and maintability
	   etc
	   
	   
=> What is Spring Container :-
	-> Spring container is the "Heart" or "Core Component" of spring framework
	-> It is same like :-
		= JVM which is used to execute java programs
		= Servlet Container or JSP Container which is used to execute Servlet and JSP pages
		= EJB Container which provides runtime environment for enterprise beans
	-> Responsibilites of Spring Container :-
		1. Instantiate bean object
		2. Configure bean objects
		3. Initialize bean objects
		4. Manage bean life-cycle
		5. Destroy bean objects
		6. Dependency Injection
		7. Resource Management
		8. AOP (Aspect Oriented Programming)
		   etc
	-> Types of Spring Container :-
		1. BeanFactory (old)
		2. ApplicationContext (new)
	-> Working of Spring Container :-
		
		
=> What do you mean by configurations in spring ?
	-> Configurations refers to the settings or instructions provided to the spring framework (spring container) to define and manage various aspects of an application
	-> There are a lot configurations in spring :-
		1. Bean definations
		2. Dependency injection
		3. Bean life-cycle
		4. Bean autowiring
		5. Bean post-processing
		6. Component scanning
		7. Database configurations
		8. AOP
		9. View resolvers
		10. Security configurations
		11. Property files
		    etc
	-> In spring, we can provide configurations by :-
		1. XML files
		2. Java classes
		3. Annotations
		4. Property files
		5. Environment variables
		6. Command-line arguments
		7. Profiles
		   etc
		   
		   
=> What is configuration metadata file :-
	-> It is also known as spring configuration file which contains the configuration metadata for our spring application
	-> It serves as a central repository to configure beans, dependencies, scopes and other application-specific settings
	-> NOTE : If configuration metadata file is an XML file, then name should be "applicationContext.xml"
		   
		   
=> What is POJO class :-
	-> POJO stands for "Plain Old Java Object"
	-> It is simple java class which follows some basic conventions for encapsulation, modularity and maintability
	-> Syntax :-
		public class Student
		{
			String name;
			public int rollno;
			private int marks;
			
			//getter and setter methods
		}
		
		
=> What is JavaBean class :-
	-> JavaBean class is the class which encapsulates many objects/properties into single unit
	-> JavaBean class is a special type of POJO class which follows the following conventions :-
		1. Class must be public
		2. It must inherit "Serializable" interface
		3. It must contain public no-arugment constructor
		4. All the properties must be private
		5. It should have public getter and setter methods
	-> Syntax :-
		public class Student implements Serializable
		{
			public Student(){}
			
			private String name;
			private int rollno;
			private int marks;
			
			//public getter and setter methods
		}
		
	-> NOTE : All JavaBean classes are POJO classes but all POJO classes are not JavaBean classes
	

=> What is difference between POJO class and JavaBean class :-
	1. POJO class is the class whch does not have any restriction
	   JavaBean class is the POJO class having some restrictions
	   
	2. POJO class may/may not inherit Serializable interface
	   JavaBean class must inherit Serializable interface
	   
	3. POJO class may/may not contain no-arugment constructor
	   JavaBean class must have public no-arugment constructor
	   
	4. In POJO class, fields or properties can have any visibility i.e. private, public, default
	   In JavaBean class, fields or properties must be private
	   
	5. In POJO classes, fields or properties can be accessed by their names
	   In JavaBean classes, fields or properties can be accessed only by getter and setter methods
	   
	6. POJO class does not have control on members
	   JavaBean class have full control on members
	   
	7. We cannot use annotations in POJO classes
	   We can use annotations in JavaBean classes
	   
	8. We cannot provide ay business logic in POJO classes
	   We can provide business logic in JavaBean classes
	   
	
=> Steps to create Spring First Program :-
	1. Download and install JDK (JDK 8, 11, 17) and any one IDE (Eclipse)
	2. Download spring jar files :-
		= spring-beans-xxx.jar
		= spring-core-xxx.jar
		= spring-context-xxx.jar
		= commons-logging-xxx.jar
		= spring-expression-xxx.jar
	3. Create "Java Project" in eclipse
	4. Add above jar files in the project (create lib)
	5. Create POJO class or JavaBean class
	6. Create configuration metadata file
	7. Create Main class to execute the application
	
=====================================================================================================
=> Components of Spring WEB-MVC Module :-
	1. Front Controller (DispatcherServlet)
	2. Handler Mapping
	3. Controller
	4. Command Classes
	5. Model & ModelAndView
	6. View Resolvers
	7. View
	
===============================================================================================================

=> Front Controller (DispatcherServlet) :-
	-> It is the controller that manages or handles all the client requests and delegates them to other components
	-> It acts as the single entry point for spring web application
	
	-> Advantages of Front Controller :-
		1. Centralized Control :-
			= It is the single entry point for centralized control over request processing and common features like security, internationalization etc
		2. Flexibility :-
			= It is highly flexible and customizable request processing flow to meet specific application needs
		3. Separation of Concerns :-
			= It separates request processing logic for more modular and maintanable applications
	
	-> In Spring WEB-MVC, "DispatcherServlet" acts as the front controller
	-> Flow of DispatcherServlet in Spring WEB-MVC :-
		= Diagram
	-> Hierarchy of DispatcherServlet (class) :-
		= Diagram
		
-----------------------------------------------------------------------------------

=> Handler Mapping :-
	-> It is used to map the requests to proper controller and returns that controller name to the front controller
	
	-> For this, Spring WEB-MVC has provided "HandlerMapping" interface and its implemented classes
	-> Some commonly used HandlerMapping implementations are :-
		1. RequestMappingHandlerMapping (default)
		2. SimpleUrlHandlerMapping
		3. BeanNameUrlHandlerMapping
		   etc
		   
	-> How to provide handler mapping configurations :-
		1. XML Configurations
		2. Java Configurations
		3. Annotations
		4. Component Scanning
		5. Default URL Mapping
	-> NOTE :-
		= The most common ways to provide handler mapping in Spring are using "annotations" and "component scanning". because they are simple and flexible
		
-----------------------------------------------------------------------------------

=> Controller :-
	-> Controllers are the heart of Spring WEB-MVC Applications.
	-> They are responsible for handling the incoming requests, executing business logic and returning response
	
	-> Advantages of Controllers :-
		1. Controllers separates the presentation layer from the business layer
		2. Controllers can be reused acress different applications
		3. Controllers are easy to test and maintain
		
	-> We can create the controllers by 3 ways :-
		1. By inheriting "Controller" interface or its implemented classes
		2. By "@Controller" annotation (to create general purpose controller or for traditional web applications)
		3. By "@RestController" annotation (to create RESTful controller)
	-> NOTE :-
		= Controller and its implemented classes has been deprecated from Spring 3.x version. So it is recommended to use annotations to create controllers
		= For mapping we use annotations i.e. @RequestMapping, @GetMapping, @PostMapping etc (for 2 & 3rd point)
		
	-> There are mainly 3 types of controllers :-
		1. Simple Controllers
			= These are the controllers that handle basic requests such as returning a static HTML page or displaying a list of data. They typically do not interact with other spring components i.e. services or respository
		2. Form-Handling Controllers
			= These are the controllers that handle the requests from HTML forms. They typically validate the form data and then perform some action such as saving the data into database or sending an email
		3. RESTful Controllers
			= These are the controllers that implement the RESTful API design pattern. Thet typically handle the requests for specific resources such as products, users, orders etc. RESTful controllers typically return the JSON data.
			
-----------------------------------------------------------------------------------

=> Command Classes :-
	-> Command Classes are normal JavaBean class or POJO class
	-> It is used to store the form data which is submmited by the client and then this data is available for business logic
	
-----------------------------------------------------------------------------------

=> Model :-
	-> It is an interface that represents a map of attributes that a controller cab use to pass data to the view
	-> Model is typically used to send the dynamic data that needs to be displayed on the view
	
	-> How to add data in model object :-
		= addAttribute(String name, Object value)
		= addAllAttributes(Map<String, Object> attributes)
	-> How to retrieve data from model object :-
		= getAttribute(String name)
		= containsAttribute(String name)
		= We can also use Expression Language
		

=> ModelAndView :-
	-> It is a class that combines both the "Model" and "view name" into a single object
	-> It allows the controller to specify which view should be used to render the response and what data should be available in that view
	
-----------------------------------------------------------------------------------

=> View Resolvers :-
	-> It is used to resolve or translates the "logical view name" returned by the controller into the "actual physical view" that should be rendered to the user
	-> For example :-
		>> Logical View Name : home
		   Actual Physical View : WEB-INF/views/home.jsp
		>> Logical View Name : productDetails
		   Actual Physical View : WEB-INF/templates/productDetails.html
	-> NOTE :-
		= To get Actual Physical Name, postfix and prefix are added to the Logical View Name
	
	-> For this Spring WEB-MVC has provided "ViewResolver" interface and its implemented classes
	-> Some implemented classes are :-
		1. InternalResourceViewResolver (default) - (used for JSP view)
		2. ResourceBundleViewResolver
		3. XmlViewResolver
		4. BeanNameViewResolver
		5. URLBasesViewSolver
		6. ThymeleafViewResolver (used for Thymeleaf view)
		7. VelocityViewResolver (used for Velocity view)
		8. FreeMarkerViewResolver (used for FreeMarker view)
		
-----------------------------------------------------------------------------------

=> View :-
	-> It is the presentation or UI which is sent to the client as a response
	-> Some common view technologies are HTML, JSP, Thymeleaf, Velocity, FreeMarker etc
	
-----------------------------------------------------------------------------------

=> web.xml file :-
	-> It is the "deployment descriptor" file which is the part of every JavaEE application
	-> Some of the responsibilites of web.xml file are :-
		1. welcome file configurations
		2. servlets configurations
		3. session timeout configurations
		4. filters configurations
		5. listeners configurations
		6. context parameters configurations
		7. error page configurations
		etc
		
	-> In Spring WEB-MVC, its main task is to configure the front controller i.e. DispatcherServlet
	-> We create web.xml file in WEB-INF folder
	
-----------------------------------------------------------------------------------

=> Spring Configuration XML File :-
	-> It is an XML file which is used to configure :-
		1. bean classes
		2. handler mapping classes
		3. controller classes
		4. view resolver classes
		etc
		
	-> The default name of Spring Configuration File is "[servlet-name]-servlet.xml"
	-> We create this file in WEB-INF folder
	
=====================================================================================================================